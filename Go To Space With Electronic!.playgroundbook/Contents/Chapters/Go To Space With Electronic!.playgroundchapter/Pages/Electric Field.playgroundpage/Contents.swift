//#-hidden-code
import UIKit
//#-end-hidden-code
/*: 
 # Electric Field
 
 ## What is it?
 
 The electric field is a field generated by positive and negative electric charges. The positive charge is called proton: 
 
 ![Proton](proton.png)
 
 The negative charge is called electron:
 
 ![Electron](electron.png)
 
 In this case, we do not mind about the single charges as their field is too low compared to the other electric fields. Indeed, we have three powerful field represented by two lateral rectangles and a third field generated by the touch of your finger.
 
 ## Let’s create the particles!
 
 Now you can use a `func` to create particles and decide their charge. We can use two `func` as well to see how the particles and the field created by your finger can cross over. 
 ````
 createParticle(number: 5, charge: “Proton”)
 createParticle(number: 5, charge: “Electron”)
 ````
 
 You can also decide the intensity and the direction of your finger’s field. Let’s try!
 
 When you finish, let’s see how electrons interact in a [RC Circuit](@next)
 */
//#-code-completion(everything, hide)
//#-code-completion(identifier, show, createParticle(number:charge:))

//#-hidden-code
import PlaygroundSupport
import SpriteKit

//Create the field Mask
let fieldMask: UInt32 = 0b1
let categoryMask: UInt32 = 0b1

//Create the squares
var positiveRect = SKSpriteNode()
var negativeRect = SKSpriteNode()



class GameScene: SKScene {
  //Create the field
  var positiveField = SKFieldNode.electricField()
  var negativeField = SKFieldNode.electricField()
  var touchField = SKFieldNode.electricField()
  
  override init(size: CGSize) {
    //Set the strenght for each field
    positiveField.strength = 10
    negativeField.strength = -10
    touchField.strength = 15
    //Set the region for each field
    let positiveRegion = SKRegion.infinite()
    let negativeRegion = SKRegion.infinite()
    let touchRegion = SKRegion.infinite()
    //Assign the region
    positiveField.region = positiveRegion
    negativeField.region = negativeRegion
    touchField.region = touchRegion
    
    positiveField.isEnabled = false
    negativeField.isEnabled = true
    touchField.isEnabled = false
    
    super.init(size: size)
  }
  
  required init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }
  
  override func didMove(to view: SKView) {
    //Create the plus Rect design
    positiveRect = SKSpriteNode(color: UIColor(red:1.00, green:0.37, blue:0.37, alpha:1.0), size: CGSize(width: 70, height: (scene?.frame.height)!))
    positiveRect.name = "positiveField"
    positiveRect.position = CGPoint(x: 35, y: (scene?.frame.midY)!)
    positiveRect.physicsBody = SKPhysicsBody(rectangleOf: positiveRect.frame.size)
    positiveRect.physicsBody?.isDynamic = false
    var minusImage = SKSpriteNode(imageNamed: "negativeImage")
    minusImage.position = CGPoint(x: 0, y: 0)
    minusImage.name = "negativeImage"
    positiveRect.addChild(minusImage)
    positiveRect.alpha = 0.5
    self.addChild(positiveRect)
    //Add positive field
    positiveField.position = CGPoint(x: (scene?.frame.width)!, y: (scene?.frame.height)!)
    
    //Create the minus Rect design
    negativeRect = SKSpriteNode(color: UIColor(red:0.29, green:0.62, blue:1.00, alpha:1.0), size: CGSize(width: 70, height: (scene?.frame.height)!))
    negativeRect.name = "negativeField"
    negativeRect.position = CGPoint(x: (scene?.frame.maxX)! - 35, y:  (scene?.frame.midY)!)
    negativeRect.physicsBody = SKPhysicsBody(rectangleOf: negativeRect.frame.size)
    negativeRect.physicsBody?.isDynamic = false
    var positiveImage = SKSpriteNode(imageNamed: "positiveImage")
    positiveImage.position = CGPoint(x: 0, y: 0)
    positiveImage.name = "positiveImage"
    negativeRect.addChild(positiveImage)
    self.addChild(negativeRect)
    //Add negative field
    positiveField.position = CGPoint(x: (scene?.frame.width)!, y: (scene?.frame.height)!)
    
    //Set color and bounds for the scene
    self.scene?.backgroundColor = UIColor(red:0.98, green:0.98, blue:0.98, alpha:1.0)
    let physicsBody = SKPhysicsBody(edgeLoopFrom: self.frame)
    self.physicsBody = physicsBody
    
    
    positiveField.physicsBody?.isDynamic = false
    negativeField.physicsBody?.isDynamic = false
    touchField.physicsBody?.isDynamic = false
    
    self.addChild(positiveField)
    self.addChild(negativeField)
    self.addChild(touchField)
    
    //Create numbers of particle with specific type of charge
    func createParticle(number: Int, charge: String) {
      for _ in 0...number - 1 {
        //Create a proton
        if charge == "Proton" {
          let protonTail = SKEmitterNode(fileNamed: "ProtonEmitter")!
          protonTail.targetNode = scene
          let proton = SKSpriteNode(imageNamed: "proton")
          proton.position = CGPoint (x: random(min: 75, max: (scene?.size.width)!) - 75, y: (scene?.size.height)! - proton.frame.size.height)
          proton.physicsBody = SKPhysicsBody(circleOfRadius: proton.size.width / 2)
          proton.physicsBody?.mass = 1
          proton.physicsBody?.charge = 5
          proton.physicsBody?.fieldBitMask = fieldMask
          proton.physicsBody?.allowsRotation = true
          proton.zPosition = 1
          
          self.addChild(proton)
          proton.addChild(protonTail)
        }
          //Create an electron
        else if charge == "Electron"{
          let electron = SKSpriteNode(imageNamed: "electron")
          let electronTail = SKEmitterNode(fileNamed: "ElectronEmitter")!
          electronTail.targetNode = scene
          electron.position = CGPoint (x: random(min: 75, max: (scene?.size.width)!) - 75, y: ((scene?.size.height)! / 2) - electron.frame.size.height)
          
          
          electron.physicsBody = SKPhysicsBody(circleOfRadius: electron.size.width / 2)
          electron.physicsBody?.mass = 1
          electron.physicsBody?.charge = -5
          electron.physicsBody?.fieldBitMask = fieldMask
          electron.physicsBody?.allowsRotation = true
          electron.zPosition = 1
          self.addChild(electron)
          electron.addChild(electronTail)
        }
        
      }
    }
    //#-end-hidden-code
    //#-editable-code
    createParticle(number: 5, charge: "Proton")
    createParticle(number: 5, charge: "Electron")
    touchField.strength = 15
    //#-end-editable-code
    //#-hidden-code
    
    if touchField.strength > 100 {
      touchField.strength = 100
    } else if touchField.strength < -100 {
      touchField.strength = -100
    }
  }
  
  override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
    
    
    let touch = touches.first?.location(in: self)
    //Invert the state for positive Field
    if atPoint(touch!).name == "positiveField" || atPoint(touch!).name == "negativeImage"{
      positiveField.isEnabled = !positiveField.isEnabled
      if positiveField.isEnabled {
        positiveRect.alpha = 1
      } else {
        positiveRect.alpha = 0.5
      }
      //Invert the state for negative Field
    } else if atPoint(touch!).name == "negativeField" || atPoint(touch!).name == "positiveImage"{
      
      negativeField.isEnabled = !negativeField.isEnabled
      if negativeField.isEnabled {
        negativeRect.alpha = 1
      } else {
        negativeRect.alpha = 0.5
      }
    }
    //Enable and set the position for touch field
    touchField.isEnabled = true
    touchField.position = touch!
  }
  //Move the touch Field
  override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
    let touch = touches.first?.location(in: self)
    touchField.position = touch!
  }
  //Disable touch field
  override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
    self.touchField.isEnabled = false
  }
}
//Set the scene
let scene = GameScene(size: CGSize(width: 1024, height: 768))
let sceneView = SKView(frame: CGRect(x: 0, y: 0, width: 512, height: 384))
//DEBUG
//sceneView.showsFPS = true
//sceneView.showsFields = true
//sceneView.showsPhysics = true
scene.scaleMode = .aspectFit
sceneView.presentScene(scene)
PlaygroundSupport.PlaygroundPage.current.liveView = sceneView
//#-end-hidden-code
